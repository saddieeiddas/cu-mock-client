// Generated by dts-bundle v0.3.0
// Dependencies for this module:
//   ../../node_modules/cu-core/lib/cu-core.d.ts

declare module 'cu-mock-client' {
    /**
      * This Source Code Form is subject to the terms of the Mozilla Public
      * License, v. 2.0. If a copy of the MPL was not distributed with this
      * file, You can obtain one at http://mozilla.org/MPL/2.0/.
      */
    import { tags } from 'cu-core';
    export default class MockAPI {
        constructor();
        initialized: boolean;
        muteVolume: boolean;
        mainVolume: number;
        patchResourceChannel: number;
        loginToken: string;
        pktHash: string;
        webAPIHost: string;
        serverURL: string;
        serverTime: number;
        vsync: number;
        fps: number;
        frameTime: number;
        netstats_udpPackets: number;
        netstats_udpBytes: number;
        netstats_tcpMessages: number;
        netstats_tcpBytes: number;
        netstats_players_updateBits: number;
        netstats_players_updateCount: number;
        netstats_players_newCount: number;
        netstats_players_newBits: number;
        netstats_lag: number;
        particlesRenderedCount: number;
        characters: number;
        terrain: number;
        perfHUD: string;
        locationX: number;
        locationY: number;
        locationZ: number;
        serverLocationX: number;
        serverLocationY: number;
        serverLocationZ: number;
        facing: number;
        velocityX: number;
        velocityY: number;
        velocityZ: number;
        speed: number;
        horizontalSpeed: number;
        velFacing: number;
        downCollisionAngle: number;
        terrainCollisionAngle: number;
        OnInitialized(c: () => void): number;
        OnServerConnected(c: (isConnected: boolean) => void): number;
        OnUpdateNameplate(c: (cell: number, colorMod: number, name: string, gtag: string, title: string) => void): void;
        OnOpenUI(callback: (name: string) => void): void;
        OnCloseUI(callback: (name: string) => void): void;
        OnShowUI(callback: (name: string) => void): void;
        OnHideUI(callback: (name: string) => void): void;
        OnEvent(callback: (event: string, ...args: any[]) => void): void;
        OnAbilityNumbersChanged(callback: (abilityNumbers: string[]) => void): void;
        OnAbilityCooldown(c: (cooldownID: number, timeStarted: number, duration: number) => void): number;
        OnAbilityActive(c: (currentAbility: string, timeStarted: number, timeTriggered: number, queuedAbility: string) => any): number;
        OnGetItem(callback: (itemID: string, data: string) => void): void;
        OnItemEquipped(callback: (itemID: string) => void): void;
        OnItemUnequipped(callback: (itemID: string) => void): void;
        OnEquippedGearItemIDsChanged(callback: (gearItemIDs: string[]) => void): void;
        OnReceiveConfigVars(c: (configs: string) => void): void;
        OnReceiveConfigVar(c: (config: any) => void): void;
        OnConfigVarChanged(c: (isChangeSuccessful: boolean) => void): void;
        OnBuildingModeChanged(c: (buildingMode: boolean) => void): void;
        OnReceiveBlocks(c: (buildingDict: any) => void): void;
        OnReceiveScreenShot(c: (screenShotString: any) => void): void;
        OnReceiveBlockTags(c: (blockID: number, tagDict: any) => void): void;
        OnCopyBlueprint(c: () => void): void;
        OnNewBlueprint(c: (index: number, name: string) => void): void;
        OnAnnouncement(c: (message: string, type: number) => void): void;
        OnInventoryItemIDsChanged(callback: (inventoryItemIDs: string[]) => void): void;
        OnCharacterIDChanged(c: (id: string) => void): void;
        OnCharacterFactionChanged(c: (faction: number) => void): void;
        OnCharacterRaceChanged(c: (race: number) => void): void;
        OnCharacterNameChanged(c: (name: string) => void): void;
        OnCharacterHealthChanged(c: (health: number, maxHealth: number) => void): void;
        OnCharacterStaminaChanged(c: (stamina: number, maxStamina: number) => void): void;
        OnCharacterEffectsChanged(c: (effects: string) => void): void;
        OnEnemyTargetNameChanged(callback: (name: string) => void): void;
        OnEnemyTargetHealthChanged(callback: (health: number, maxHealth: number) => void): void;
        OnEnemyTargetStaminaChanged(callback: (stamina: number, maxStamina: number) => void): void;
        OnEnemyTargetEffectsChanged(callback: (effects: string) => void): void;
        OnFriendlyTargetNameChanged(callback: (name: string) => void): void;
        OnFriendlyTargetHealthChanged(callback: (health: number, maxHealth: number) => void): void;
        OnFriendlyTargetStaminaChanged(callback: (stamina: number, maxStamina: number) => void): void;
        OnFriendlyTargetEffectsChanged(callback: (effects: string) => void): void;
        OnBeginChat(c: (commandMode: number, text: string) => void): void;
        OnChat(c: (type: number, from: string, body: string, nick: string, iscse: boolean) => void): void;
        OnShowAbility(callback: (abilityID: string) => void): void;
        OnEditAbility(callback: (abilityID: string) => void): void;
        OnAbilityCreated(callback: (abilityID: string, ability: string) => void): void;
        OnAbilityDeleted(callback: (abilityID: string) => void): void;
        OnAbilityRegistered(callback: (abilityID: string, cooldowns: string, duration: number, triggerTime: number) => void): void;
        OnConsoleText(c: (text: string) => void): void;
        OnLogMessage(c: (category: string, level: number, time: string, process: number, thread: number, message: string) => void): void;
        CancelOnAbilityCooldown(c: number): void;
        CancelOnAbilityActive(c: number): void;
        CancelChangeConfig(variable: string): void;
        CancelAllConfigChanges(tag: tags): void;
        CancelBlockPlacement(): void;
        CancelOnServerConnected(c: number): void;
        CancelOnInitialized(c: number): void;
        FOV(degrees: number): void;
        DropLight(intensity: number, radius: number, red: number, green: number, blue: number): void;
        ResetLights(): void;
        PlaySoundEvent(id: number): void;
        ToggleCamera(): void;
        OpenUI(name: string): void;
        CloseUI(name: string): void;
        HideUI(name: string): void;
        ShowUI(name: string): void;
        ToggleUIVisibility(name: string): void;
        FocusUI(name: string): void;
        RequestInputOwnership(): void;
        ReleaseInputOwnership(): void;
        Quit(): void;
        CrashTheGame(): void;
        Listen(event: string): void;
        Ignore(event: string): void;
        Fire(event: string, ...args: any[]): void;
        Respawn(id: string): void;
        Attack(abilityID: string): void;
        OnAbilityError(c: (message: string) => void): void;
        GetItem(itemID: string): void;
        UnequipItem(itemID: string): void;
        EquipItem(itemID: string): void;
        SaveConfigChanges(): void;
        OnSavedConfigChanges(c: () => void): void;
        RestoreConfigDefaults(tag: tags): void;
        ChangeConfigVar(variable: string, value: string): void;
        GetConfigVars(tag: tags): void;
        GetConfigVar(variable: string): void;
        ToggleBuildingMode(): void;
        SetBuildingMode(c: (newMode: number) => void): void;
        RequestBlocks(): void;
        RequestBlockTags(c: (blockID: number) => void): void;
        ChangeBlockType(c: (newType: number) => void): void;
        SelectBlueprint(c: (index: number) => void): void;
        SaveBlueprint(c: (name: string) => void): void;
        RequestBlueprints(): void;
        CommitBlock(): void;
        BlockRotateX(): void;
        BlockRotateY(): void;
        BlockRotateZ(): void;
        RemoveIslands(): void;
        ApplyStability(): void;
        BlockFlipX(): void;
        BlockFlipY(): void;
        BlockFlipZ(): void;
        CopyBlueprint(): void;
        PasteBlueprint(): void;
        OpenScreenshotShare(): void;
        TakeScreenshot(): void;
        Emote(emote: number): void;
        SendChat(type: number, to: string, body: string): void;
        JoinMUC(room: string): void;
        LeaveMUC(room: string): void;
        SendSlashCommand(command: string, parameters: string): void;
        Stuck(): void;
        ChangeZone(zoneID: number): void;
        ShowAbility(abilityID: string): void;
        EditAbility(abilityID: string): void;
        AbilityCreated(abilityID: string, primaryBaseComponentID: string, secondaryBaseComponentID: string, ability: string): void;
        AbilityDeleted(abilityID: string): void;
        RegisterAbility(abilityID: string, primaryBaseComponentID: string, secondaryBaseComponentID: string): void;
        ConsoleCommand(body: string): void;
        Connect(host: string, port: string, character: string, webAPIHost: string): void;
    }
}

